@model EntityLayer.Etkinlikler
@{
    ViewBag.Title = "EtkinlikGoster";
    Layout = "~/Views/Shared/KullaniciLayout.cshtml";
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://getbootstrap.com/docs/5.3/assets/css/docs.css" rel="stylesheet">
}

<link href="~/Content/MultiSelect.css" rel="stylesheet" />
<div class="row">
    <div class="col-md-12">
        <div class="panel">
            <div class="row">
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="row no-gutters">
                            <div class="col-md-6">
                                <div class="image-preview">
                                    <img id="ResmiGoruntule"
                                         src="@(string.IsNullOrEmpty(Model.EtkinlikResmi) ? Url.Content("~/Images/bosprofil.png") : Url.Content(Model.EtkinlikResmi))"
                                         alt="Mevcut Etkinlik Resmi"
                                         class="card-img" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card-body">
                                    <h1 class="card-title event-title custom-event-title">@Model.EtkinlikAdi</h1>


                                    <p class="card-text">
                                        <strong>Düzenleyen:</strong>
                                        @{
                                            var kullaniciAdi = "Bilinmiyor";
                                            foreach (var kullanici in ViewBag.Kullanicilar as List<EntityLayer.Kullanicilar>)
                                            {
                                                if (kullanici.KullaniciID == Model.KullaniciID)
                                                {
                                                    kullaniciAdi = kullanici.Ad + " " + kullanici.Soyad;
                                                    break;
                                                }
                                            }
                                        }
                                        @kullaniciAdi
                                    </p>
                                    <p class="card-text">
                                        <strong>İlgi Alanı:</strong>
                                        @{
                                            var ilgiAlaniAdi = "Bilinmiyor";
                                            foreach (var ilgiAlani in ViewBag.IlgiAlanlari as List<EntityLayer.IlgiAlanlari>)
                                            {
                                                if (ilgiAlani.IlgiAlaniID == Model.IlgiAlaniID)
                                                {
                                                    ilgiAlaniAdi = ilgiAlani.IlgiAlaniAdi;
                                                    break;
                                                }
                                            }
                                        }
                                        @ilgiAlaniAdi
                                    </p>
                                    <p class="card-text">
                                        <strong>Etkinlik Tarihi:</strong> @Model.EtkinlikTarih.ToString("dd.MM.yyyy")
                                    </p>
                                    <p class="card-text">
                                        <strong>Etkinlik Saati:</strong> @Model.EtkinlikSaati
                                    </p>
                                    <p class="card-text">
                                        <strong>Etkinlik Süresi:</strong> @Model.EtkinlikSuresi dakika
                                    </p>
                                    <p class="card-text">
                                        <strong>Etkinlik Konumu:</strong> @Model.EtkinlikKonumu
                                    </p>
                                </div>
                            </div>
                        </div>

                        <div class="card-body">
                            <p class="card-text">
                                <strong>Açıklama:</strong> @Model.Aciklama
                            </p>
                        </div>

                        <div class="card-footer">
                            <div class="d-flex justify-content-end align-items-center">
                                <a href="@Url.Action("EtkinlikKatil", "Kullanicilar", new { etkinlikID = Model.EtkinlikID })" class="btn btn-sm btn-bordo" onclick="return confirm('Bu etkinliğe katılmak istediğinizden emin misiniz?');">
                                    <i class="fas fa-calendar-check"></i> Katıl
                                </a>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-body">
                            <h4>Etkinlik Konumu Haritası</h4>
                            <div id="map" style="width: 100%; height: 400px; border: 1px solid #ccc;"></div>
                        </div>

                        <div class="card-body">
                            <div class="form-group">
                                <label for="startPoint">Başlangıç Konumu</label>
                                <input type="text" id="startPoint" class="form-control" placeholder="Başlangıç Konumu Giriniz" />

                                <label for="transportationMode" class="mt-3">Ulaşım Seçeneği</label>
                                <div id="transportationMode" class="btn-group" role="group">
                                    <button type="button" class="btn btn-outline-bordo" onclick="selectTransportMode('DRIVING')">
                                        <i class="bi bi-car-front"></i> Araba
                                    </button>
                                    <button type="button" class="btn btn-outline-bordo" onclick="selectTransportMode('WALKING')">
                                        <i class="bi bi-person-walking"></i> Yürüyüş
                                    </button>
                                    <button type="button" class="btn btn-outline-bordo" onclick="selectTransportMode('TRANSIT')">
                                        <i class="bi bi-bus-front"></i> Otobüs
                                    </button>
                                    <button type="button" class="btn btn-outline-bordo" onclick="selectTransportMode('BICYCLING')">
                                        <i class="bi bi-bicycle"></i> Bisiklet
                                    </button>
                                </div>

                                <button type="button" class="btn btn-bordo " onclick="getRoute()">Rota Göster</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC0S5pBRUFR04U15319_piNxqF14j691nE&callback=initMap"
        type="text/javascript"></script>
<script>
    var map, geocoder, marker, directionsService, directionsRenderer;
    var selectedTransportMode = "DRIVING"; 

    function initMap() {
        var etkinlikKonumu = "@Model.EtkinlikKonumu";
        var defaultLocation = { lat: 41.015137, lng: 28.979530 };

        map = new google.maps.Map(document.getElementById("map"), {
            zoom: 13,
            center: defaultLocation
        });

        geocoder = new google.maps.Geocoder();
        directionsService = new google.maps.DirectionsService();
        directionsRenderer = new google.maps.DirectionsRenderer();
        directionsRenderer.setMap(map);

        if (etkinlikKonumu) {
            geocodeAddress(etkinlikKonumu);
        }
    }

    function geocodeAddress(address) {
        geocoder.geocode({ 'address': address }, function (results, status) {
            if (status === 'OK') {
                var location = results[0].geometry.location;
                map.setCenter(location);
                map.setZoom(13);

                marker = new google.maps.Marker({
                    map: map,
                    position: location,
                    title: address
                });
            } else {
                alert("Konum bulunamadı: " + status);
            }
        });
    }

    function selectTransportMode(mode) {
        secilenRotaMode = mode;
        var buttons = document.querySelectorAll("#transportationMode .btn");
        buttons.forEach(function (button) {
            button.classList.remove("active");
        });
        event.target.classList.add("active");
    }

    function getRoute() {
        var baslangicKonum = document.getElementById("startPoint").value;
        var ulasimMode = secilenRotaMode;
        var gidilecekKonum = "@Model.EtkinlikKonumu";

        if (startPoint) {
            var request = {
                origin: baslangicKonum,
                destination: gidilecekKonum,
                travelMode: google.maps.TravelMode[ulasimMode]
            };

            directionsService.route(request, function (response, status) {
                if (status === 'OK') {
                    directionsRenderer.setDirections(response);
                } else {
                    alert("Rota oluşturulamadı: " + status);
                }
            });
        } else {
            alert("Başlangıç konumu giriniz.");
        }
    }
</script>

<style>
    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        margin-top: 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .custom-event-title {
        font-weight: bold;
        color: #430202;
        font-size: 1.75rem;
    }

    .form-group .col-md-2 {
        position: relative;
        top: 5px;
    }

    .btn-bordo {
        background-color: #430202;
        color: white;
    }

        .btn-bordo:hover {
            background-color: #5b0f14;
            color: white;
        }

    .btn-outline-bordo {
        border-color: #430202;
        color: #430202;
    }

        .btn-outline-bordo:hover {
            background-color: #430202;
            color: white;
            border-color: #430202;
        }

    #transportationMode .btn {
        margin-right: 10px;
        border-radius: 5px;
    }

        #transportationMode .btn i {
            margin-right: 5px;
            .btn-black

    {
        background-color: #212529;
        color: white;
    }

    .btn-black:hover {
        background-color: #343a40;
        color: white;
    }

    .btn-yesil {
        background-color: #3A6351;
        color: white;
    }

        .btn-yesil:hover {
            background-color: #2E5042;
            color: white;
        }

    .btn-kirmizi {
        background-color: #8b0000;
        color: white;
        border-color: #8b0000;
    }

        .btn-kirmizi:hover {
            background-color: #660000;
            border-color: #660000;
            color: white;
        }

    .row {
        display: flex;
        justify-content: space-between;
    }

    .panel {
        border: 2px solid #ccc;
        border-radius: 5px;
        background-color: #f9f9f9;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        margin-top: 20px;
    }

    .panel-heading {
        background-color: #430202;
        color: white;
        padding: 10px 15px;
        border-radius: 5px 5px 0 0;
        text-align: center;
    }

    .panel-body {
        padding: 15px;
    }

    .image-preview {
        text-align: center;
        border: 2px solid #ccc;
        padding: 5px;
        border-radius: 5px;
        background-color: #f9f9f9;
        margin-top: 10px;
        width: 90%;
        max-width: 600px;
        margin-left: auto;
        margin-right: auto;
    }

        .image-preview h4 {
            font-size: 16px;
            color: #430202;
            text-align: center;
            margin-bottom: 10px;
        }

    .img-fluid {
        max-width: 100%;
        height: auto;
        border-radius: 5px;
        margin-top: 5px;
    }

    .image-preview img {
        transition: all 0.3s ease-in-out;
        width: 100%;
    }

        .image-preview img:hover {
            transform: scale(1.05);
        }

    .input-group {
        display: flex;
        width: 100%;
        position: relative;
    }

        .input-group .form-control {
            flex-grow: 1;
            padding-right: 40px;
        }

    .input-group-append button {
        position: absolute;
        right: 0;
        height: 40px;
        top: 50%;
        transform: translateY(-50%);
        margin-top: 3px;
    }

    .d-flex {
        display: flex;
        justify-content: flex-start;
        align-items: center;
    }

        .d-flex .btn {
            margin-right: 5px;
            flex-grow: 1;
        }

        .d-flex .btn-sm {
            width: 100%;
            max-width: 500px;
        }

    .panel h4 {
        background-color: #430202;
        color: white;
        padding: 10px;
        border-radius: 5px;
        text-align: center;
        margin-bottom: 20px;
        font-size: 1.5rem;
        font-weight: bold;
    }
</style>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">